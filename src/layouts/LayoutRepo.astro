---
// Layout para el repo y el blog
import Logo from "@/components/Logo.astro";
import Layout from "@/layouts/Layout.astro";
import Prose  from "@/components/Blogs/Prose.astro";
import Menu from "@/components/Blogs/Menu.astro";
import BackArrow from "@/components/icons/BackArrow.astro";
import ResponsiveMenu from "@/components/Blogs/ResponsiveMenu.astro";

import { getI18N } from "@/i18n/index"

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

type Props = {
  frontmatter: {
    menu?: string[]
    subMenu?: string[][]
    title: string
    img: string
    autores: string[]
    lastUp: string
    description: string
    descriptionLay: string
  }
}

const { frontmatter } = Astro.props;
let { menu, subMenu } = frontmatter

let withMenu = true

if(menu == undefined) {
  menu = []
  withMenu = false
}

const hiddenMenu = withMenu ? "flex" : "hidden"
const colNum = withMenu ? 3 : 4
---

<Layout title={frontmatter.title} description={frontmatter.descriptionLay} blog={true}>
  <!-- Este es el menu reponsivo-->
  <ResponsiveMenu autores={frontmatter.autores} lastUp={frontmatter.lastUp} menu={menu} subMenu={subMenu} i18n={i18n}/>
  <!-- Aqui acaba el menu responsivo -->
  <div class="cabeza h-[400px] flex flex-col gap-6 items-center justify-center" style=`background-image: url(${frontmatter.img}); relative`>
    <a href="/">
        <button class="bg-neutral-800 rounded-md pr-4 pl-2 py-2 absolute top-5 left-5 shadow-lg ring-2 ring-Eco-60 hover:bg-Eco-20 -active:translate-x-1 active:translate-y-1 transition-colors lg:flex justify-center gap-1 hidden">
            <span>
                <BackArrow/>
            </span>
            Regresar
        </button>
    </a>
    <Logo class="w-24 opacity-80"/>
    <h1 class="md:text-6xl font-cabinet font-normal text-2xl">
        {frontmatter.title}
    </h1>
    <h2 class="font-satoshi font-thin opacity-80">
        {frontmatter.description}
    </h2>
  </div>
  <div class="w-full p-10 grid place-content-center">
    <div class='sm:w-[90vw] lg:w-[1000px] grid grid-cols-4'>
      <!-- Este es el menu -->
      <Menu menu={menu} subMenu={subMenu} autores={frontmatter.autores} lastUp={frontmatter.lastUp} i18n={i18n} hiddenMenu={hiddenMenu}/>
      <div class=`hidden ${hiddenMenu}` id="espacio"></div>
      <!-- Aqui el contenido -->
      <div id="contenido" class=`lg:col-span-${colNum} col-span-4`>
        <Prose>
          <slot/>
        </Prose>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Estilos para el layout de la página de blog */
  html {
    scroll-padding-top: 80px; /* Para pantallas menores a 1024px */
  }
  @media only screen and (min-width: 1024px) {
    html {
      scroll-padding-top: 10px; /* Para pantallas de 1024px en adelante */
    }
  }

  /* Estilos para el menú reponsivo */
  .cabeza {
    background-size: cover;
    background-position: center 400px;
  }
</style>

<script is:inline data-astro-rerun>
  // Función para manejar el evento de redimensionamiento de la ventana
  function handleResize() {
    // Obtener la nueva anchura y altura de la ventana del navegador
    var newScreenWidth = globalThis.innerWidth;
    var seccion = document.getElementById('contenido');
    var menu = document.getElementById('menu')
    var menurespo = document.getElementById("responsive-menu")
    if(newScreenWidth <= 1024 && menu != null && seccion != null && menurespo != null) {
      menu.classList.add("hidden")
      seccion.classList.add("col-span-4")
      seccion.style.scrollMarginTop = "500px"
      menurespo.classList.remove("hidden")
    }
    if(newScreenWidth >= 1024 && menu != null && seccion != null && menurespo != null) {
      menu.classList.remove("hidden")
      seccion.classList.remove("col-span-4")
      seccion.classList.add("col-span-3")
      menurespo.classList.add("flex")
    }
  }
  // Agregar un event listener para el evento de redimensionamiento de la ventana
  globalThis.addEventListener("resize", handleResize);
  globalThis.addEventListener("load", handleResize)
  globalThis.addEventListener("DOMContentLoaded",handleResize)
</script>

<script>
  let whitMenu = document.getElementById('menu')
  if(whitMenu != null && !whitMenu.classList.contains('hidden')) {
    let passedContent = false;
    globalThis.addEventListener('scroll', function() {
    let seccion = document.getElementById('contenido');
    if (seccion != null) {
        let rect = seccion.getBoundingClientRect(); 
        let offsetPercentage = 100;
        let windowHeight = window.innerHeight;
        let offset = (windowHeight * offsetPercentage) / 100; // Margen de error para el desplazamiento
        // Verificar si la sección está visible en la ventana actual
        if (rect.top <= (globalThis.innerHeight - offset) && rect.bottom >= offset) {
          let menu = document.getElementById("menu")
          let espacio = document.getElementById('espacio')
          if (menu != null) {
            menu.classList.add("fixed", "top-[15px]", "w-[250px]")
          }
          if (espacio !=  null) {
            espacio.classList.remove("hidden")
          }
          passedContent = false;
        } else {
          passedContent = true;
        }
      }
    });
    globalThis.addEventListener('scroll', function() {
      // Verificar si el usuario ha pasado del contenido y está subiendo
      if (passedContent && window.scrollY < 900) {
        // Realizar la acción deseada cuando se está subiendo y se ha pasado del contenido
        let menu = document.getElementById("menu")
        let espacio = document.getElementById('espacio')
        if (menu != null) {
          menu.classList.remove("fixed", "top-[15px]", "w-[275px]")
        }
        if (espacio !=  null) {
          espacio.classList.add("hidden")
        }
      }
    });
  }
</script>

<script>
  function addResponsiveMenu() {
    let seccion = document.getElementById('contenido');
    if (seccion != null) {
      let rect = seccion.getBoundingClientRect();
      let offsetPercentage = 85;
      let windowHeight = window.innerHeight;
      let offset = (windowHeight * offsetPercentage) / 100; // Margen de error para el desplazamiento
      // Verificar si la sección está visible en la ventana actual
      if (rect.top <= (globalThis.innerHeight - offset) && rect.bottom >= offset) {
        let responsive = document.getElementById("responsive-menu")
        if (responsive != null) {
          responsive.classList.add("bg-neutral-800")
        }
        passedContent = false;
      } else {
        passedContent = true;
      }
    }
  }
  function removeReponsiveMenu() {
    // Verificar si el usuario ha pasado del contenido y está subiendo
    if (passedContent && window.scrollY < 600) {
      // Realizar la acción deseada cuando se está subiendo y se ha pasado del contenido
      let responsive = document.getElementById("responsive-menu")
      if (responsive != null) {
        responsive.classList.remove("bg-neutral-800")
      }
    }
  }
  let passedContent = false;
  globalThis.addEventListener('scroll', addResponsiveMenu);
  globalThis.addEventListener('scroll', removeReponsiveMenu);
</script>

<script is:inline data-astro-rerun>
  var btnmenu = document.getElementById("btn-hmenu")
  var menudes = document.getElementById("menu-des")
  var btnsinter = document.querySelectorAll(".btn-inter")

  function toggleMenu() {
    if(btnmenu != null && menudes != null) {
      menudes.classList.toggle("-translate-x-full")
    }
  }

  btnmenu?.addEventListener("click", toggleMenu)
  btnsinter.forEach(element => {
    if (element != null) {
      element.addEventListener("click", toggleMenu)
    }
  });
</script>